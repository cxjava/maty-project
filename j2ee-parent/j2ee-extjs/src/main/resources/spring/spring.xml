<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.maty.j2ee.common.springmvc.SpringContextHolder" lazy-init="false" />
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<!-- 自动搜索@Component , @Service , @Repository等标注的类 不搜索@Controller的类 -->
	<!-- 自动扫描组件，这里要把web下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.maty.j2ee">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.maty.j2ee"/>
		<property name="jpaProperties">
			<props>
				<!-- 命名规则 My_NAME->MyName -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="showSql" value="false" />
		<property name="generateDdl" value="true" />
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource"/>
			</bean>
		</property>
	</bean>

	<!-- Spring Data Jpa配置 -->
 	<jpa:repositories base-package="com.maty.j2ee"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
   
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	
	<!-- H2环境 -->
 	<beans profile="H2">
 		<context:property-placeholder ignore-unresolvable="true"
			location="classpath*:/jdbc.h2.properties,
					  classpath*:/config.properties" />	
		<!-- 数据源配置, 使用应用中的Druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			<property name="maxActive" value="20" />
		    <property name="initialSize" value="1" />
		    <property name="maxWait" value="60000" />
		    <property name="minIdle" value="1" />
		 
		    <property name="timeBetweenEvictionRunsMillis" value="60000" />
		    <property name="minEvictableIdleTimeMillis" value="300000" />
		    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		</bean>
		<!-- 初始化数据表结构 -->
		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
			<jdbc:script location="classpath:sql/h2/schema.sql" encoding="UTF-8" />
			<jdbc:script location="classpath:sql/h2/data.sql"  encoding="UTF-8"/>
		</jdbc:initialize-database>
	</beans>
	
	<!-- MYSQL环境 -->
	<beans profile="MYSQL">
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/jdbc.mysql.properties,
					  classpath*:/config.properties" />
		<!-- 数据源配置, 使用应用中的Druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>
		<!-- 初始化数据表结构 -->
		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
			<jdbc:script location="classpath:sql/mysql/schema.sql" encoding="UTF-8" />
			<jdbc:script location="classpath:sql/mysql/data.sql"  encoding="UTF-8"/>
		</jdbc:initialize-database>
	</beans>
	
	<!-- unit test环境 -->
	<beans profile="test">
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/jdbc.test.properties,
					  classpath*:/config.properties" />
		<!-- 数据源配置, 使用应用中的Druid数据库连接池 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>
		<!-- 初始化数据表结构 -->
		<jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">
			<jdbc:script location="classpath:sql/h2/schema.sql" encoding="UTF-8" />
			<jdbc:script location="classpath:sql/h2/data.sql"  encoding="UTF-8"/>
		</jdbc:initialize-database>
		<!-- <jdbc:embedded-database id="dataSource" type="H2">
			<jdbc:script location="classpath:sql/h2/schema.sql" encoding="UTF-8" />
			<jdbc:script location="classpath:sql/h2/data.sql"  encoding="UTF-8"/>
		</jdbc:embedded-database> -->
	</beans>
	
</beans>
